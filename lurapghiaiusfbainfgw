
    
local m_thread = task do setreadonly(m_thread, false) 

    function m_thread.spawn_loop(p_time, p_callback) m_thread.spawn(function()
    
    while true do p_callback() m_thread.wait(p_time) end end) end setreadonly(m_thread, true) end 
    
    local library, pointers = loadstring(game:HttpGet("https://raw.githubusercontent.com/wqfgq/ui-lib/main/nigus"))() do
getgenv().ver = 1.0
    local window = library:New({name = "Excords.GG".." - "..game.Players.LocalPlayer.DisplayName.." - ".. getgenv().ver ..  "("..game.Players.LocalPlayer.UserId.. ") ",size = Vector2.new(500, 590),Accent = Color3.fromRGB(135, 206, 250)}) --size = Vector2.new(555, 610) , 625.1,610 --66,44,144  ,100, 61, 200           117,96,175     255,135,255
        
    local legitbot = window:Page({name = "Main", size = 72}) 
     local dddwq = window:Page({name = "misc", size = 72}) 
 
local dd = legitbot:Section({name = "Main", side = "left"})
local cam = legitbot:Section({name = "Camlock", side = "right"})
 local dddwq,aa,tp,autobuy = dddwq:MultiSection({sections = {"Misc","AntiAims","Tps","Autobuys"}, side = "left", size = 295})





local vibilenigger = dd:Toggle({

Name = "Enable",
Default = false,
Flag = "eane",
Callback = function(v)
     getgenv().Settings.Silent.Enabled = v
end


})

local vibilenigger = dd:Textbox({

Name = "Prediction",

Flag = "predictipon",
placeholder = "Enter Prediction",
middle = true,
Callback = function(v)
  getgenv().Settings.Silent.Prediction = v
end


})

local vibilenigger = dd:Toggle({

Name = "Enable Airshot Aimpart",
Default = false,
Flag = "enapoijhnbeee",
Callback = function(v)
     getgenv().Settings.Silent.UseAirPart = v
end


})


 dd:Dropdown({
                Name = "Aim Part",
                Options = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"},
                Default = "HumanoidRootPart",
                Pointer = "themes/xd/",
               
                callback = function(callback)
getgenv().Settings.Silent.AimPart = callback
                end
            }
        )




 dd:Dropdown({
                Name = "Airshot AimPart",
                Options = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"},
                Default = "RightLowerLeg",
                Pointer = "themes/xd/",
               
                callback = function(callback)
getgenv().Settings.Silent.AirPart = callback
                end
            }
        )

local vibilenigger = dd:Toggle({

Name = "Anti GroundShot",
Default = false,
Flag = "gorund",
Callback = function(v)
     getgenv().Settings.Silent.AntiGroundshot = v
end


})


local vibilenigger = dd:Toggle({

Name = "Use Prediction",
Default = true,
Flag = "movement",
Callback = function(v)
getgenv().Settings.Silent.PredictMovement = v
end


})



local vibilenigger = dd:Textbox({

Name = "Hit Chance",

Flag = "jhot",
placeholder = "Enter HitChance",
middle = true,
Callback = function(v)
 getgenv().Settings.Silent.HitChance = v
end
})


local vibilenigger = dd:Toggle({

Name = "Closest Part",
Default = false,
Flag = "ckt",
Callback = function(v)
getgenv().Settings.Silent.ClosestPart = v
end
})



local vibilenigger = dd:Toggle({

Name = "Show FOV",
Default = false,
Flag = "enabeee",
Callback = function(v)
     getgenv().Settings.FOV.Visible = v
end


})


local vibilenigger = dd:Toggle({

Name = "FOV Filled",
Default = false,
Flag = "filled",
Callback = function(v)
     getgenv().Settings.FOV.Filled = v
end


})


local vibilenigger = dd:Textbox({

Name = "FOV Size",

Flag = "prediction",
placeholder = "Enter Size",
middle = true,
Callback = function(v)
 getgenv().Settings.FOV.Radius = v
end


})

local vibilenigger = dd:Toggle({

Name = "Wall Check",
Default = false,
Flag = "caddc",
Callback = function(v)
     getgenv().Settings.Checks.WallCheck = v
end


})

local vibilenigger = dd:Toggle({

Name = "Unlock On Death",
Default = false,
Flag = "cvvvwqc",
Callback = function(v)
     getgenv().Settings.Checks.UnlockedOnDeath = v
end


})

local vibilenigger = dd:Toggle({

Name = "Crew Check",
Default = false,
Flag = "cvvvvvvvvvc",
Callback = function(v)
     getgenv().Settings.Checks.CrewCheck = v
end


})



local vibilenigger = cam:Toggle({

Name = "Enable",
Default = false,
Flag = "vvvvvvwe",
Callback = function(v)
     getgenv().Settings.AimAssist.Enable = v
end


})

local vibilenigger = cam:Label({
  Name = "Keybind is Q",  
    
})

local vibilenigger = cam:Toggle({

Name = "Enable Prediction",
Default = false,
Flag = "cqvvwdc",
Callback = function(v)
     getgenv().Settings.Prediction.PredictMovement = v
end


})

local vibilenigger = cam:Textbox({

Name = "Prediction",

Flag = "ddasfqwd",
placeholder = "Enter Prediction ",
middle = true,
Callback = function(v)
 getgenv().Settings.Prediction.PredictionVelocity = v
end


})



local vibilenigger = cam:Toggle({

Name = "AutoPrediction",
Default = false,
Flag = "ccqwfs",
Callback = function(v)
     getgenv().Settings.AimAssist.AutoPingSets = v
end


})


local vibilenigger = cam:Toggle({

Name = "Enable Airshot Aimpart",
Default = false,
Flag = "enabeee",
Callback = function(v)
     getgenv().Settings.Part.CheckIfJumped  = v
end


})


 cam:Dropdown({
                Name = "AimPart",
                Options = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"},
                Default = "HumanoidRootPart",
                Pointer = "",
               
                callback = function(callback)
getgenv().Settings.Part.AimPart = callback
                end
            }
        )




 cam:Dropdown({
                Name = "Airshot Aim-Part",
                Options = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"},
                Default = "RightLowerLeg",
                Pointer = "",
               
                callback = function(callback)
getgenv().Settings.Part.CheckIfJumpedAimPart = callback
                end
            }
        )

local vibilenigger = cam:Toggle({

Name = "Closest Part",
Default = false,
Flag = "ddqddqaww",
Callback = function(v)
     getgenv().Settings.Part.GetClosestPart = v
end


})

local vibilenigger = cam:Toggle({

Name = "Wall Check",
Default = false,
Flag = "dddqaww",
Callback = function(v)
     getgenv().Settings.AimAssist.CheckForWalls = v
end


})

local vibilenigger = cam:Toggle({

Name = "KO Check",
Default = false,
Flag = "wwqqwqddcwdq",
Callback = function(v)
     getgenv().Settings.Check.CheckIfKo = v
end


})

local vibilenigger = cam:Toggle({

Name = "Unlock If Dead",
Default = false,
Flag = "wwqdqwqddcwdq",
Callback = function(v)
     getgenv().Settings.Check.DisableOnPlayerDeath = v
end


})

local vibilenigger = cam:Toggle({

Name = "UnderGround/Sky Resolver",
Default = false,
Flag = "wwqdqwqddcwdq",
Callback = function(v)
     getgenv().Settings.Resolver.Underground = v
end


})

local vibilenigger = cam:Toggle({

Name = "Detect Desync",
Default = false,
Flag = "wwqdqwqwqddcwdq",
Callback = function(v)
     getgenv().Settings.Resolver.DetectDesync = v
end


})




local vibilenigger = cam:Toggle({

Name = "First Person",
Default = false,
Flag = "ccwqfwd",
Callback = function(v)
     getgenv().Settings.AimAssist.FirstPerson = v
end


})


local vibilenigger = cam:Toggle({

Name = "Third Person",
Default = false,
Flag = "ccafwqe",
Callback = function(v)
     getgenv().Settings.AimAssist.ThirdPerson = v
end


})

local vibilenigger = cam:Toggle({

Name = "Show Fov",
Default = false,
Flag = "qwfqfqfsdafewf",
Callback = function(v)
     getgenv().Settings.Visual.Fov = v
end


})


local vibilenigger = cam:Textbox({

Name = "FOV Size",

Flag = "qqjjddqqwwd",
placeholder = "Enter Size",
middle = true,
Callback = function(v)
 getgenv().Settings.Visual.FovRadius = v
end


})


     cam:Colorpicker(
                {
                    pointer = "",
                    name = "FOV Color",
                    default = Color3.fromRGB(100, 61, 200),
                    callback = function(p_state)
                   getgenv().Settings.Visual.FovColor = p_state
                    end
                }
            )

local vibilenigger = cam:Toggle({

Name = "Smoothness",
Default = false,
Flag = "ccqwd",
Callback = function(v)
     getgenv().Settings.Smooth.Smoothness = v
end


})

       


local vibilenigger = cam:Textbox({

Name = "Smoothness Amount",

Flag = "ddqqwwd",
placeholder = "Enter Smoothness Amount",
middle = true,
Callback = function(v)
 getgenv().Settings.Smooth.SmoothnessAmount = v
end


})

local vibilenigger = cam:Toggle({

Name = "Use Circle Distance",
Default = false,
Flag = "wwwdq",
Callback = function(v)
     getgenv().Settings.AimAssist.UseCircleRadius = v
end


})



local vibilenigger = cam:Toggle({

Name = "Disable Outside Circle",
Default = false,
Flag = "cecd",
Callback = function(v)
     getgenv().Settings.AimAssist.DisableOutSideCircle = v
end


})




        
            aa:Toggle({name = "Axis-D", Default = false, callback = function(value)
                
                getgenv().Enableddd = value
                
                                game:GetService("RunService").heartbeat:Connect(function()
        if getgenv().Enableddd ~= false then 
        local vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =      Vector3.new(
        getgenv().X,getgenv().Y,getgenv().Z
        ) 
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = vel
        end 
    end)
                                end})
            aa:Slider({name = "Axis X", min = -20000, max = 20000, Default = 0, suffix = "%", callback = function(value)
                                getgenv().X = value
                                end})
            aa:Slider({name = "Axis Y", min =  -20000, max = 20000, Default = 0, suffix = "%", callback = function(value)
                                getgenv().Y = value
                                end})
            aa:Slider({name = "Axis Z", min =  -20000, max = 20000, Default = 0, suffix = "%", callback = function(value)
                               getgenv().Z = value
                                end})
            --
            aa:Toggle({name = "Sky-U", Default = false, callback = function(value)
                                getgenv().Sky = value
    
    game:GetService("RunService").heartbeat:Connect(function()
        if getgenv().Sky ~= false then 
        local vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0,      getgenv().SkyAmount,0) 
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = vel
        end 
    end)
                                end})
            aa:Slider({name = "Sky Height", min = -16364, max = 16364, Default = 0, suffix = "%", callback = function(value)
                                getgenv().SkyAmount = value
                                end})
            --
            aa:Toggle({name = "Desync-A", Default = false, callback = function(value)
                                getgenv().slammeAA = true 
    
    game:GetService("RunService").heartbeat:Connect(function()
        if getgenv().slammeAA == true then 
        local abc = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(1,1,1) (2^16)
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = abc
        end 
    end)
                                end})
            --
            aa:Toggle({name = "UnderGround-D", Default = false, callback = function(value)
                                getgenv().Underground = value 
    
    game:GetService("RunService").heartbeat:Connect(function()
        if getgenv().Underground ~= false then 
        local vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0,-         getgenv().UndergroundAmount,0) 
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = vel
        end 
    end)
    
                                end})
            aa:Slider({name = "Ground Strength", min = -16364, max = 16364, Default = 0, suffix = "%", callback = function(value)
                                getgenv().UndergroundAmount = value
                                end})
    
            
            dddwq:Button({name = "Animation Pack",callback = function(value)
              repeat
    wait()
until game:IsLoaded() and game.Players.LocalPlayer.Character:FindFirstChild("FULLY_LOADED_CHAR") and game.Players.LocalPlayer.PlayerGui.MainScreenGui:FindFirstChild("AnimationPack") and game.Players.LocalPlayer.PlayerGui.MainScreenGui:FindFirstChild("AnimationPlusPack")

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Lean") then
    game.ReplicatedStorage.ClientAnimations.Lean:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Lay") then
    game.ReplicatedStorage.ClientAnimations.Lay:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Dance1") then
    game.ReplicatedStorage.ClientAnimations.Dance1:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Dance2") then
    game.ReplicatedStorage.ClientAnimations.Dance2:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Greet") then
    game.ReplicatedStorage.ClientAnimations.Greet:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Chest Pump") then
    game.ReplicatedStorage.ClientAnimations["Chest Pump"]:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Praying") then
    game.ReplicatedStorage.ClientAnimations.Praying:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("TheDefault") then
    game.ReplicatedStorage.ClientAnimations.TheDefault:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Sturdy") then
    game.ReplicatedStorage.ClientAnimations.Sturdy:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Rossy") then
    game.ReplicatedStorage.ClientAnimations.Rossy:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("Griddy") then
    game.ReplicatedStorage.ClientAnimations.Griddy:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("TPose") then
    game.ReplicatedStorage.ClientAnimations.TPose:Destroy()
end

if game.ReplicatedStorage.ClientAnimations:FindFirstChild("SpeedBlitz") then
    game.ReplicatedStorage.ClientAnimations.SpeedBlitz:Destroy()
end

local Animations = game.ReplicatedStorage.ClientAnimations

local LeanAnimation = Instance.new("Animation", Animations)
LeanAnimation.Name = "Lean"
LeanAnimation.AnimationId = "rbxassetid://3152375249"

local LayAnimation = Instance.new("Animation", Animations)
LayAnimation.Name = "Lay"
LayAnimation.AnimationId = "rbxassetid://3152378852"

local Dance1Animation = Instance.new("Animation", Animations)
Dance1Animation.Name = "Dance1"
Dance1Animation.AnimationId = "rbxassetid://3189773368"

local Dance2Animation = Instance.new("Animation", Animations)
Dance2Animation.Name = "Dance2"
Dance2Animation.AnimationId = "rbxassetid://3189776546"

local GreetAnimation = Instance.new("Animation", Animations)
GreetAnimation.Name = "Greet"
GreetAnimation.AnimationId = "rbxassetid://3189777795"

local ChestPumpAnimation = Instance.new("Animation", Animations)
ChestPumpAnimation.Name = "Chest Pump"
ChestPumpAnimation.AnimationId = "rbxassetid://3189779152"

local PrayingAnimation = Instance.new("Animation", Animations)
PrayingAnimation.Name = "Praying"
PrayingAnimation.AnimationId = "rbxassetid://3487719500"

local TheDefaultAnimation = Instance.new("Animation", Animations)
TheDefaultAnimation.Name = "TheDefault"
TheDefaultAnimation.AnimationId = "rbxassetid://11710529975" -- FIX THIS

local SturdyAnimation = Instance.new("Animation", Animations)
SturdyAnimation.Name = "Sturdy"
SturdyAnimation.AnimationId = "rbxassetid://11710524717"

local RossyAnimation = Instance.new("Animation", Animations)
RossyAnimation.Name = "Rossy"
RossyAnimation.AnimationId = "rbxassetid://11710527244"

local GriddyAnimation = Instance.new("Animation", Animations)
GriddyAnimation.Name = "Griddy"
GriddyAnimation.AnimationId = "rbxassetid://11710529220"

local TPoseAnimation = Instance.new("Animation", Animations)
TPoseAnimation.Name = "TPose"
TPoseAnimation.AnimationId = "rbxassetid://11710524200"

local SpeedBlitzAnimation = Instance.new("Animation", Animations)
SpeedBlitzAnimation.Name = "SpeedBlitz"
SpeedBlitzAnimation.AnimationId = "rbxassetid://11710541744"

function AnimationPack(Character)
    Character:WaitForChild'Humanoid'
    repeat
        wait()
    until game.Players.LocalPlayer.Character:FindFirstChild("FULLY_LOADED_CHAR") and game.Players.LocalPlayer.PlayerGui.MainScreenGui:FindFirstChild("AnimationPack") and game.Players.LocalPlayer.PlayerGui.MainScreenGui:FindFirstChild("AnimationPlusPack")

    local AnimationPack = game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.AnimationPack
    local AnimationPackPlus = game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.AnimationPlusPack
    local ScrollingFrame = AnimationPack.ScrollingFrame
    local CloseButton = AnimationPack.CloseButton
    local ScrollingFramePlus = AnimationPackPlus.ScrollingFrame
    local CloseButtonPlus = AnimationPackPlus.CloseButton

    local Lean = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(LeanAnimation)

    local Lay = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(LayAnimation)

    local Dance1 = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(Dance1Animation)

    local Dance2 = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(Dance2Animation)

    local Greet = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(GreetAnimation)

    local ChestPump = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(ChestPumpAnimation)

    local Praying = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(PrayingAnimation)

    local TheDefault = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(TheDefaultAnimation)

    local Sturdy = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(SturdyAnimation)

    local Rossy = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(RossyAnimation)

    local Griddy = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(GriddyAnimation)

    local TPose = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(TPoseAnimation)

    local SpeedBlitz = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(SpeedBlitzAnimation)

    AnimationPack.Visible = true

    AnimationPackPlus.Visible = true

    ScrollingFrame.UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    ScrollingFramePlus.UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    for i,v in pairs(ScrollingFrame:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Lean" then
                v.Name = "LeanButton"
            end
        end
    end

    for i,v in pairs(ScrollingFrame:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Lay" then
                v.Name = "LayButton"
            end
        end
    end

    for i,v in pairs(ScrollingFrame:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Dance1" then
                v.Name = "Dance1Button"
            end
        end
    end

    for i,v in pairs(ScrollingFrame:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Dance2" then
                v.Name = "Dance2Button"
            end
        end
    end

    for i,v in pairs(ScrollingFrame:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Greet" then
                v.Name = "GreetButton"
            end
        end
    end

    for i,v in pairs(ScrollingFrame:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Chest Pump" then
                v.Name = "ChestPumpButton"
            end
        end
    end

    for i,v in pairs(ScrollingFrame:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Praying" then
                v.Name = "PrayingButton"
            end
        end
    end

    for i,v in pairs(ScrollingFramePlus:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "The Default" then
                v.Name = "TheDefaultButton"
            end
        end
    end

    for i,v in pairs(ScrollingFramePlus:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Sturdy" then
                v.Name = "SturdyButton"
            end
        end
    end

    for i,v in pairs(ScrollingFramePlus:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Rossy" then
                v.Name = "RossyButton"
            end
        end
    end

    for i,v in pairs(ScrollingFramePlus:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Griddy" then
                v.Name = "GriddyButton"
            end
        end
    end

    for i,v in pairs(ScrollingFramePlus:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "T Pose" then
                v.Name = "TPoseButton"
            end
        end
    end

    for i,v in pairs(ScrollingFramePlus:GetChildren()) do
        if v.Name == "TextButton" then
            if v.Text == "Speed Blitz" then
                v.Name = "SpeedBlitzButton"
            end
        end
    end

    function Stop()
        Lean:Stop()
        Lay:Stop()
        Dance1:Stop()
        Dance2:Stop()
        Greet:Stop()
        ChestPump:Stop()
        Praying:Stop()
        TheDefault:Stop()
        Sturdy:Stop()
        Rossy:Stop()
        Griddy:Stop()
        TPose:Stop()
        SpeedBlitz:Stop()
    end

    local LeanTextButton = ScrollingFrame.LeanButton
    local LayTextButton = ScrollingFrame.LayButton
    local Dance1TextButton = ScrollingFrame.Dance1Button
    local Dance2TextButton = ScrollingFrame.Dance2Button
    local GreetTextButton = ScrollingFrame.GreetButton
    local ChestPumpTextButton = ScrollingFrame.ChestPumpButton
    local PrayingTextButton = ScrollingFrame.PrayingButton
    local TheDefaultTextButton = ScrollingFramePlus.TheDefaultButton
    local SturdyTextButton = ScrollingFramePlus.SturdyButton
    local RossyTextButton = ScrollingFramePlus.RossyButton
    local GriddyTextButton = ScrollingFramePlus.GriddyButton
    local TPoseTextButton = ScrollingFramePlus.TPoseButton
    local SpeedBlitzTextButton = ScrollingFramePlus.SpeedBlitzButton

    AnimationPack.MouseButton1Click:Connect(function()
        if ScrollingFrame.Visible == false then
            ScrollingFrame.Visible = true
            CloseButton.Visible = true
            AnimationPackPlus.Visible = false
        end
    end)
    AnimationPackPlus.MouseButton1Click:Connect(function()
        if ScrollingFramePlus.Visible == false then
            ScrollingFramePlus.Visible = true
            CloseButtonPlus.Visible = true
            AnimationPack.Visible = false
        end
    end)
    CloseButton.MouseButton1Click:Connect(function()
        if ScrollingFrame.Visible == true then
            ScrollingFrame.Visible = false
            CloseButton.Visible = false
            AnimationPackPlus.Visible = true
        end
    end)
    CloseButtonPlus.MouseButton1Click:Connect(function()
        if ScrollingFramePlus.Visible == true then
            ScrollingFramePlus.Visible = false
            CloseButtonPlus.Visible = false
            AnimationPack.Visible = true
        end
    end)

    LeanTextButton.MouseButton1Click:Connect(function()
        Stop()
        Lean:Play()
    end)
    LayTextButton.MouseButton1Click:Connect(function()
        Stop()
        Lay:Play()
    end)
    Dance1TextButton.MouseButton1Click:Connect(function()
        Stop()
        Dance1:Play()
    end)
    Dance2TextButton.MouseButton1Click:Connect(function()
        Stop()
        Dance2:Play()
    end)
    GreetTextButton.MouseButton1Click:Connect(function()
        Stop()
        Greet:Play()
    end)
    ChestPumpTextButton.MouseButton1Click:Connect(function()
        Stop()
        ChestPump:Play()
    end)
    PrayingTextButton.MouseButton1Click:Connect(function()
        Stop()
        Praying:Play()
    end)
    TheDefaultTextButton.MouseButton1Click:Connect(function()
        Stop()
        TheDefault:Play()
    end)
    SturdyTextButton.MouseButton1Click:Connect(function()
        Stop()
        Sturdy:Play()
    end)
    RossyTextButton.MouseButton1Click:Connect(function()
        Stop()
        Rossy:Play()
    end)
    GriddyTextButton.MouseButton1Click:Connect(function()
        Stop()
        Griddy:Play()
    end)
    TPoseTextButton.MouseButton1Click:Connect(function()
        Stop()
        TPose:Play()
    end)
    SpeedBlitzTextButton.MouseButton1Click:Connect(function()
        Stop()
        SpeedBlitz:Play()
    end)

    game:GetService("Players").LocalPlayer.Character.Humanoid.Running:Connect(function()
        Stop()
    end)

    game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function()
        Stop()
    end)
end
AnimationPack(game.Players.LocalPlayer.Character)
game.Players.LocalPlayer.CharacterAdded:Connect(AnimationPack)
                                end})
    
      dddwq:Button({name = "Remove Character",callback = function(value)
          
         pcall(function()
		game.Players.LocalPlayer.Character.Shirt:Destroy()
		game.Players.LocalPlayer.Character.RightUpperLeg:Destroy()
		game.Players.LocalPlayer.Character.Humanoid.HealthDisplayDistance = math.huge
		game.Players.LocalPlayer.Character.Humanoid.NameDisplayDistance = math.huge
		game.Players.LocalPlayer.Character.RightUpperLeg.Size = Vector3.new(0,0,0)
		game.Players.LocalPlayer.Character.RightUpperLeg.Massless = true
		game.Players.LocalPlayer.Character.RightUpperLeg.CanCollide = false

		heazd = true

		while heazd == true do 
			pcall(function()  
				game.Players.LocalPlayer.Character.RightUpperLeg.RightHipRigAttachment.CFrame =  CFrame.new(0, 100000.4736328125, 0)
				game.Players.LocalPlayer.Character.RightUpperLeg.CFrame = CFrame.new(0, 100000.4736328125, 0)
			end)
			wait()
		end
	end)
	wait(0.10)
	pcall(function()
		game.Players.LocalPlayer.Character.LeftUpperLeg:Destroy()
		game.Players.LocalPlayer.Character.Pants:Destroy()
		game.Players.LocalPlayer.Character.Humanoid.HealthDisplayDistance = math.huge
		game.Players.LocalPlayer.Character.Humanoid.NameDisplayDistance = math.huge
		game.Players.LocalPlayer.Character.LeftUpperLeg.Size = Vector3.new(0,0,0)
		game.Players.LocalPlayer.Character.LeftUpperLeg.Massless = true
		game.Players.LocalPlayer.Character.LeftUpperLeg.CanCollide = false

		heazd = true

		while heazd == true do 
			pcall(function()  
				game.Players.LocalPlayer.Character.LeftUpperLeg.LeftHipRigAttachment.CFrame =  CFrame.new(0, 100000.4736328125, 0)
				game.Players.LocalPlayer.Character.LeftUpperLeg.CFrame = CFrame.new(0, 100000.4736328125, 0)
			end)
			wait()
		end
	end)
	wait(0.10)
	pcall(function()
		game.Players.LocalPlayer.Character.Head.Neck:Destroy()
		game.Players.LocalPlayer.Character.UpperTorso.NeckAttachment:Destroy()
		game.Players.LocalPlayer.Character.Humanoid.HealthDisplayDistance = math.huge
		game.Players.LocalPlayer.Character.Humanoid.NameDisplayDistance = math.huge
		game.Players.LocalPlayer.Character.Head.Size = Vector3.new(0,0,0)
		game.Players.LocalPlayer.Character.Head.Massless = true
		game.Players.LocalPlayer.Character.Head.CanCollide = false

		heazd = true

		while heazd == true do 
			pcall(function()  
				game.Players.LocalPlayer.Character.Head.NeckRigAttachment.CFrame =  CFrame.new(0, 100000.4736328125, 0)
				game.Players.LocalPlayer.Character.UpperTorso.NeckRigAttachment.CFrame =  CFrame.new(0, 100000.4736328125, 0)
				game.Players.LocalPlayer.Character.Head.CFrame = CFrame.new(0, 100000.4736328125, 0)
			end)
			wait()
		end
	end)
      end})

  dddwq:Button({name = "Bag All",callback = function(value)
      
local bag = true
local takingbag = true
local Plr = game.Players.LocalPlayer
repeat wait(1)
	if game.Players.LocalPlayer.Character:FindFirstChild("[BrownBag]") == nil then
		repeat
			takingbag = true
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-314.580566, 51.1788902, -727.484558)
			wait()
			fireclickdetector(workspace.Ignored.Shop["[BrownBag] - $25"].ClickDetector)
		until Plr.Backpack:FindFirstChild("[BrownBag]")
		Plr.Backpack["[BrownBag]"].Parent = Plr.Character
		takingbag = false
	end

	if takingbag == false then
		local chars
		for i, v  in pairs(game.Players:GetPlayers()) do
			if v.Character and v.Character:FindFirstChild("Christmas_Sock") == nil and v.Character:FindFirstChild("FULLY_LOADED_CHAR") and v ~= Plr then
				chars = v.Character
				if Plr.Character:FindFirstChild("[BrownBag]") then
					Plr.Character["[BrownBag]"]:Activate()
				end
				Plr.Character.HumanoidRootPart.CFrame = v.Character.UpperTorso.CFrame * CFrame.new(0, 0, -2)
			end
			wait(0.005)
		end
		if not chars then
			bag = false
		end
	end
until bag == false
  end})
  
    dddwq:Button({name = "Hide Block",callback = function(value)
        Plr = game.Players.LocalPlayer

game:GetService('RunService'):BindToRenderStep("Hide - Block", 0 , function()

		wait()
		for _,v in pairs(Plr.Character:FindFirstChildWhichIsA('Humanoid'):GetPlayingAnimationTracks()) do
			if v.Name == 'Stomp' then
				v:Stop()
			end
		end
end)
        end})
    
        dddwq:Button({name = "Stomp Aura",callback = function(value)
       
getgenv().stomparua = false


local distance = 15; 



-- Variables


local MainEvent = game:GetService('ReplicatedStorage').MainEvent;
local player = game.Players.LocalPlayer;
local target = nil;
local ready = nil;
local jo = game:GetService('Players').LocalPlayer;
local x = true;
local Plr = game.Players.LocalPlayer;
cagada = false;
fyga = true


Plr = game.Players.LocalPlayer


game:GetService('RunService'):BindToRenderStep("Bucle", 0 , function()

    wait()

for _,v in pairs(game.Workspace.Players:GetChildren()) do
	if (v.UpperTorso.Position - player.Character.HumanoidRootPart.Position).Magnitude <= distance then
    target = v.Name

 if game.Players[target].Character.BodyEffects['K.O'].Value == false then 

else 


  repeat wait()
    
    if cagada == false then
        AX1 = jo.Character:FindFirstChild('HumanoidRootPart').CFrame.X
            AY1 = jo.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
            AZ1 = jo.Character:FindFirstChild('HumanoidRootPart').CFrame.Z
        guardado = true 
        end


  Plr.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players[target].Character.UpperTorso.Position + Vector3.new(0, 3, 0))

  game:GetService("ReplicatedStorage").MainEvent:FireServer("Stomp")

  until  fuga == true

if guardado == true then
 for i = 1, 1 do 
      jo.Character.HumanoidRootPart.CFrame = CFrame.new(AX1,AY1,AZ1)
      guardado = false
      fuga = false
 end
 end
end
end

end
end)
        end})
    

dddwq:Toggle({

    Name = "Kill All",
    Default = false,
    Flag = "toggle",
    Callback = function(v)
      Knife = v
	repeat

		local cor = coroutine.wrap(function()
			if not game.Players.LocalPlayer.Character:FindFirstChild("[Knife]") then
				takingbag = true
				local cor = coroutine.wrap(function()

					game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-278.063446, 21.75, -240.871841))
				end)
				cor()
				wait(1)

				fireclickdetector(workspace.Ignored.Shop["[Knife] - $150"].ClickDetector, 4)
				game.Players.LocalPlayer.Backpack["[Knife]"].Handle.Size = Vector3.new(10, 10, 10)
				wait(0.5)
				game.Players.LocalPlayer.Backpack["[Knife]"].Parent = game.Players.LocalPlayer.Character
				takingbag = false
			end
		end)
		cor()
		if takingbag == false then
			for i, v  in pairs(game.Players:GetPlayers()) do
				if v.Character:FindFirstChild("Knife") == nil and v.Character:FindFirstChildOfClass("ForceField") == nil and v.Character ~= game.Players.LocalPlayer.Character then
					local chars = v.Character
					if game.Players.LocalPlayer.Character:FindFirstChild("[Knife]") then
						game.Players.LocalPlayer.Character["[Knife]"]:Activate()
					end
					game.Players.LocalPlayer.Character:MoveTo(v.Character.UpperTorso.Position)
			end
							wait(0.005)
			end
		end
		wait()
until Knife == false
        end})

    local settings_page = window:Page({name = "Config", side = "Right", size = 73.2}) do
    local config_section = settings_page:Section({name = "Configuration", side = "Right"}) do
            local current_list = {}
            local function update_config_list()
                local list = {}
                for idx, file in ipairs(listfiles("Yms/configs")) do
                    local file_name = file:gsub("Yms/configs\\",""):gsub(".txt","") list[#list + 1] = file_name end
                local is_new = #list ~= #current_list
                if not is_new then
                    for idx, file in ipairs(list) do
                        if file ~= current_list[idx] then is_new = true break end end end
                if is_new then current_list = list pointers["settings/configuration/list"]:UpdateList(list, false, true) end end
            config_section:Listbox({pointer = "settings/configuration/list"})
            config_section:Textbox({
                    pointer = "settings/configuration/name",
                    placeholder = "Config Name",
                    text = "",
                    middle = true,
                    reset_on_focus = false})
            config_section:ButtonHolder({Buttons = {{"Create",  function()local config_name = pointers["settings/configuration/name"]:get()
                if config_name == "" or isfile("Yms/configs/" .. config_name .. ".txt") then return end writefile("Yms/configs/" .. config_name .. ".txt","") update_config_list() end}, {"Delete", function()
                local selected_config = pointers["settings/configuration/list"]:get()[1][1]
                if selected_config then
                    delfile("Yms/configs/" .. selected_config .. ".txt")
                    update_config_list()
                end
                end}}})
            config_section:ButtonHolder({Buttons = {{"Load", function()
                local selected_config = pointers["settings/configuration/list"]:get()[1][1]
                if selected_config then
                    window:LoadConfig(readfile("Yms/configs/" .. selected_config .. ".txt"))
                end
            end}, {"Save", function()
                local selected_config = pointers["settings/configuration/list"]:get()[1][1]
                if selected_config then
                    writefile("Yms/configs/" .. selected_config .. ".txt", window:GetConfig())
                end
            end}}}) m_thread.spawn_loop(3, update_config_list) end

    local menu_section = settings_page:Section({name = "Menu"}) do
        local function gs(a)
            return game:GetService(a)
        end
        local actionservice = gs("ContextActionService")
        menu_section:Keybind({
                pointer = "settings/menu/bind",
                name = "Bind",
                default = Enum.KeyCode.RightShift,
                callback = function(p_state)
                    window.uibind = p_state
                end
            }
        )
        menu_section:Toggle(
            {
                pointer = "sabcd_aa",
                name = "Cursor",
                default = true,
                callback = function(p_state)
                    local userInputService = game:GetService("UserInputService")
                    if p_state == true then
                        userInputService.MouseIconEnabled = true
                    else
                        userInputService.MouseIconEnabled = false
                    end
                end})

        menu_section:Toggle({
                pointer = "settings/menu/watermark",
                name = "Watermark",
                default = false,
                callback = function(p_state)
                    window.watermark:Update("Visible", p_state)
                end})
        menu_section:Toggle(
            {
                pointer = "settings/menu/keybind_list",
                name = "Keybind List",
                callback = function(p_state)
                    window.keybindslist:Update("Visible", p_state)
                end
            }
        )

        menu_section:Toggle(
            {
                pointer = "freezemovement",
                name = "Disable Movement if UI Open",
                callback = function(bool)
                    if bool and window.isVisible then
                        actionservice:BindAction(
                            "FreezeMovement",
                            function()
                                return Enum.ContextActionResult.Sink
                            end,
                            false,
                            unpack(Enum.PlayerActions:GetEnumItems())
                        )
                    else
                        actionservice:UnbindAction("FreezeMovement")
                    end
                end
            }
        )


        menu_section:Button(
            {
                name = "Unload",
                confirmation = true,
                callback = function()
                    window:Unload()
                end
            }
        )

        menu_section:Button(
            {
                name = "Force Close",
                confirmation = true,
                callback = function()
                    window:Fade()
                end
            }
        )

    end

    local other_section = settings_page:Section({name = "Other", side = "Right"})
    do
        other_section:Button(
            {
                name = "Copy JobId",
                callback = function()
                    setclipboard(game.JobId)
                end
            }
        )
        other_section:Button(
            {
                name = "Copy GameID",
                callback = function()
                    setclipboard(game.GameId)
                end
            }
        )
        other_section:Button(
            {
                name = "Copy Game Invite",
                callback = function()
                    setclipboard(
                        "Roblox.GameLauncher.joinGameInstance(" .. game.PlaceId .. ',"' .. game.JobId .. '")')
                end})
        other_section:Button({
                name = "Rejoin",
                confirmation = true,
                callback = function()
                  local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Rejoin = coroutine.create(function()
    local Success, ErrorMessage = pcall(function()
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end)

    if ErrorMessage and not Success then
        warn(ErrorMessage)
    end
end)

coroutine.resume(Rejoin)
                end
            }
        )
    end
local load_section = settings_page:Section({name = "Load Menu", side = "Right"})  
load_section:Toggle({name = "Show Menu"})
load_section:Toggle({name = "Auto Load Config"})

    local themes_section = settings_page:Section({name = "Themes", side = "Left"}) do





        
        themes_section:Dropdown({
                Name = "Theme",
                Options = {"Default", "Tyrisware", "Abyss", "Ubuntu","Spotify", "Tyrisware v2", "Solix", "nomercy.rip", "Abyss V2", "Anorix", "Octel", "LegitSneeze", "AimWare", "x15","Gamesense", "Kitten Bot", "BitchBot", "BubbleGum", "Slime"},
                Default = "Default",
                Pointer = "themes/xd/",
                callback = function(callback)
                    if callback == "Default" then
                        library:UpdateColor("Accent", Color3.fromRGB(189, 182, 240))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(30, 30, 30))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(25, 25, 25))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50, 50, 50))
                    
                    elseif callback == "Spotify" then
                        library:UpdateColor("Accent", Color3.fromRGB(103, 212, 91))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(30, 30, 30))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(25, 25, 25))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(46, 46, 46))
                    
                    elseif callback == "AimWare" then
                        library:UpdateColor("Accent", Color3.fromRGB(250, 47, 47))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(41, 40, 40))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(38, 38, 38))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(46, 46, 46))
                   
                    elseif callback == "nomercy.rip" then
                        library:UpdateColor("Accent", Color3.fromRGB(242, 150, 92))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(22, 12, 46))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(17, 8, 31))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(46, 46, 46))
                   
                    elseif callback == "Abyss" then
                        library:UpdateColor("Accent", Color3.fromRGB(81, 72, 115))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(41, 41, 41))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(31, 30, 30))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50, 50, 50))
                        
                        elseif callback == "Abyss V2" then
                        library:UpdateColor("Accent", Color3.fromRGB(161, 144, 219))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(27, 27, 27))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(18, 18, 18))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50, 50, 50))
                        
                        elseif callback == "Gamesense" then
                        library:UpdateColor("Accent", Color3.fromRGB(163, 248, 105))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(25, 25, 25))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(16, 16, 16))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50, 50, 50))
                   
                    elseif callback == "Kitten Bot" then
                        library:UpdateColor("Accent", Color3.fromRGB(100, 61, 200))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(30, 30, 30))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(25, 25, 25))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50, 50, 50))
                    
                    elseif callback == "Ubuntu" then
                        library:UpdateColor("Accent", Color3.fromRGB(226, 88, 30))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(62,62,62))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(50, 50, 50))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50, 50, 50))
                    
                    elseif callback == "BitchBot" then
                        library:UpdateColor("Accent", Color3.fromRGB(126,72,163))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(62,62,62))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(50, 50, 50))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50, 50, 50))
                        
                    elseif callback == "Anorix" then
                        library:UpdateColor("Accent", Color3.fromRGB(105,156,164))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(51,51,51))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(41,41,41))
                        library:UpdateColor("outline", Color3.fromRGB(37, 37, 37))
                        library:UpdateColor("inline", Color3.fromRGB(39, 39, 39))
                        
                        
                         elseif callback == "Tyrisware v2" then
                        library:UpdateColor("Accent", Color3.fromRGB(0,253,255))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(51,51,51))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(41,41,41))
                        library:UpdateColor("outline", Color3.fromRGB(37, 37, 37))
                        library:UpdateColor("inline", Color3.fromRGB(39, 39, 39))
                        
                        
                        
                        
                    elseif callback == "BubbleGum" then
                        library:UpdateColor("Accent", Color3.fromRGB(169, 83, 245))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(22, 12, 46))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(17, 8, 31))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(46, 46, 46))
                    
                    elseif callback == "Slime" then
                        library:UpdateColor("Accent", Color3.fromRGB(64, 247, 141))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(22, 12, 46))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(17, 8, 31))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(46, 46, 46))
                    
                    elseif callback == "Octel" then
                        library:UpdateColor("Accent", Color3.fromRGB(255, 201, 254))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(32, 32, 32))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(25, 25, 25))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(30, 28, 30))
     
                    elseif callback == "LegitSneeze" then
                        library:UpdateColor("Accent", Color3.fromRGB(135,206,250))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(43,41,48))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(44,41,48))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(50,50,50))
     
                    elseif callback == "x15" then
                        library:UpdateColor("Accent", Color3.fromRGB(92,57,152))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(32, 32, 32))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(25, 25, 25))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(30, 28, 30))
     
                    elseif callback == "Tyrisware" then
                        library:UpdateColor("Accent", Color3.fromRGB(59,84,154))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(32, 33, 32))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(25, 26, 25))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(30, 31, 30))
     
                    elseif callback == "Solix" then
                        library:UpdateColor("Accent", Color3.fromRGB(120, 93, 166))
                        library:UpdateColor("lightcontrast", Color3.fromRGB(33,33,33))
                        library:UpdateColor("darkcontrast", Color3.fromRGB(24,24,24))
                        library:UpdateColor("outline", Color3.fromRGB(0, 0, 0))
                        library:UpdateColor("inline", Color3.fromRGB(30, 29, 30)) end end})
        themes_section:Dropdown({
                Name = "Accent Effects",
                Options = {"Rainbow", "Fade", "Disguard Fade", "Disguard Rainbow", "None"},
                Default = "None",
                Pointer = "themes/xd/",
                callback = function(callback)
                    if callback == "Rainbow" then
                        if callback then

                            ching = game:GetService("RunService").Heartbeat:Connect(function()chings:Disconnect()
                                        library:UpdateColor("Accent", Color3.fromHSV(tick() % 5 / 5, 1, 1))
                                    end)
                        else
                            if ching then
                                ching:Disconnect()
                            end
                        end

                    elseif callback == "Disguard Rainbow" then
                        ching:Disconnect()


                    elseif callback == "Disguard Fade" then

                        chings:Disconnect()

                    elseif callback == "Fade" then
                        if callback then

                            chings =
                                game:GetService("RunService").Heartbeat:Connect(
                                    function()
                                        ching:Disconnect()
                                        local r = (math.sin(workspace.DistributedGameTime/2)/2)+0.5
                                        local g = (math.sin(workspace.DistributedGameTime)/2)+0.5
                                        local b = (math.sin(workspace.DistributedGameTime*1.5)/2)+0.5
                                        local color = Color3.new(r, g, b)
                                        library:UpdateColor("Accent", color)
                                    end
                                )
                        else
                            if chings then
                                chings:Disconnect()
                            end
                        end

                    end
                end
            }
        )

        themes_section:Colorpicker(
            {
                pointer = "themes/menu/accent",
                name = "Accent",
                default = Color3.fromRGB(100, 61, 200),
                callback = function(p_state)
                    library:UpdateColor("Accent", p_state)
                end
            }
        )
        themes_section:Colorpicker(
            {
                pointer = "settings/menu/accent",
                name = "Light Contrast",
                default = Color3.fromRGB(30, 30, 30),
                callback = function(p_state)
                    library:UpdateColor("lightcontrast", p_state)
                end
            }
        )
        themes_section:Colorpicker(
            {
                pointer = "settings/menu/accent",
                name = "Dark Constrast",
                default = Color3.fromRGB(25, 25, 25),
                callback = function(p_state)
                    library:UpdateColor("darkcontrast", p_state)
                end
            }
        )
        themes_section:Colorpicker(
            {
                pointer = "settings/menu/accent",
                name = "Outline",
                default = Color3.fromRGB(0, 0, 0),
                callback = function(p_state)
                    library:UpdateColor("outline", p_state)
                end
            }
        )
        themes_section:Colorpicker(
            {
                pointer = "settings/menu/accent",
                name = "Inline",
                default = Color3.fromRGB(50, 50, 50),
                callback = function(p_state)
                    library:UpdateColor("inline", p_state)
                end
            }
        )
        themes_section:Colorpicker(
            {
                pointer = "settings/menu/accent",
                name = "Text Color",
                default = Color3.fromRGB(255, 255, 255),
                callback = function(p_state)
                    library:UpdateColor("textcolor", p_state)
                end
            }
        )
        
    
        
        
        
        themes_section:Colorpicker(
            {
                pointer = "settings/menu/accent",
                name = "Text Border",
                default = Color3.fromRGB(0, 0, 0),
                callback = function(p_state)
                    library:UpdateColor("textborder", p_state)
                end})
        themes_section:Colorpicker({
                pointer = "settings/menu/accent",
                name = "Cursor Outline",
                default = Color3.fromRGB(255, 255, 255),
                callback = function(p_state)
                    library:UpdateColor("cursoroutline", p_state)
                end})end end window.uibind = Enum.KeyCode.V window:Initialize() end




getgenv().Settings = {
Silent = {
    SilentToggle = "",
    Enabled = false,
    AimPart = "HumanoidRootPart",
    Prediction = 0.11,
    ClosestPart = false,
    HitChance = 400,
    AntiGroundshot = false,
    PredictMovement = false,
    UseAirPart = false,
    AirPart = "RightLowerLeg"
},
FOV = {
    Visible = false,
    Radius = 32,
    Filled = false,
},
Checks = {
    WallCheck = false,
    UnlockedOnDeath = false,
    CrewCheck = false,
},
AutoGunFov = {
    Enabled = false, -- // Gun Fov 
    ["Double-Barrel SG"] = {["FOV"] = 34}, -- // Db
    ["Revolver"] = {["FOV"] = 38}, -- // Rev
    ["SMG"] = {["FOV"] = 23}, -- // Smg
    ["Shotgun"] = {["FOV"] = 20}, -- // Shotgun
    ["Rifle"] = {["FOV"] = 26}, -- // Rifle
    ["TacticalShotgun"] = {["FOV"] = 43}, -- // Rev
    ["Silencer"] = {["FOV"] = 17}, -- // Smg
    ["AK47"] = {["FOV"] = 13}, -- // Shotgun
    ["P90"] = {["FOV"] = 12}, -- // Rifle
    ["Glock"] = {["FOV"] = 12}, -- // Rifle
    ["RPG"] = {["FOV"] = 12}, --// Rpg 
    ["AR"] = {["FOV"] = 12} 
},
AimAssist = {
    Enable = false,
    ToggleKey = true,
    UseKeyBoardKey = true,
    KeyBoardKey = Enum.KeyCode.Q,
    ThirdPerson = false,
    FirstPerson = false,
    AutoPingSets = false,
    UseCircleRadius = false,
    DisableOutSideCircle = false,
    UseShake = false,
    ShakePower = 100,
    CheckForWalls = true,
},
Check = {
    CheckIfKo = false,
    DisableOnPlayerDeath = false,
},
Prediction = {
    PredictMovement = false,
    PredictionVelocity = 0.13,
},
Smooth = {
    Smoothness = false,
    SmoothnessAmount = 0.0150,
},
Part = {
    AimPart = "UpperTorso",
    CheckIfJumpedAimPart = "RightFoot",
    CheckIfJumped = true,
    GetClosestPart = false,
},
Resolver = {---- this is for camlock
    UnderGround = false,
    DetectDesync = false,
},
Visual = {
    Fov = false,
    FovTransparency = 1,
    FovThickness = 1,
    FovColor = Color3.fromRGB(255, 185, 0),
    FovRadius = 360,
},
Spoofer = {
    MemorySpoofer = false,
    MemoryTabColor = Color3.fromRGB(211, 88, 33),
    MemoryMost = 85000,
    MemoryLeast = 80000,
    

},
}

if not LPH_OBFUSCATED then
LPH_NO_VIRTUALIZE = function(...)
    return (...)
end
LPH_NO_VIRTUALIZE = function(...)
    return (...)
end
end

LPH_NO_VIRTUALIZE(
function()
    local Players, Client, Mouse, RS, Camera, r =
        game:GetService("Players"),
        game:GetService("Players").LocalPlayer,
        game:GetService("Players").LocalPlayer:GetMouse(),
        game:GetService("RunService"),
        game.Workspace.CurrentCamera,
        math.random
local Circle = Drawing.new("Circle")
Circle.Color = Color3.new(0, 0, 255)
Circle.Transparency = 0.5
Circle.Thickness = 1

local Prey = nil
local Plr  = nil
local OldSilentAimPart = getgenv().Settings.Silent.AirPart

local Vec2 = function(property)
return Vector2.new(property.X, property.Y + (game:GetService("GuiService"):GetGuiInset().Y))
end

local UpdateSilentFOV = function()
if not Circle then
return Circle
end
Circle.Visible = getgenv().Settings.FOV["Visible"]
Circle.Radius = getgenv().Settings.FOV["Radius"] * 3.05
Circle.Filled = getgenv().Settings.FOV["Filled"]
Circle.Position = Vec2(Mouse)
local chance = CalcChance(Settings.Silent.HitChance)
if not chance then
return nil
end



return Circle
end


game.RunService.RenderStepped:Connect(
function()
UpdateSilentFOV()
end
)

local WallCheck = function(destination, ignore)
if getgenv().Settings.Checks.WallCheck then
local Origin = Camera.CFrame.p
local CheckRay = Ray.new(Origin, destination - Origin)
local Hit = game.workspace:FindPartOnRayWithIgnoreList(CheckRay, ignore)
return Hit == nil
else
return true
end
end

if getgenv().Settings.Checks.CrewCheck == true then
while true do
    local newPlayer = game.Players.PlayerAdded:wait()
    if player:IsInGroup(newPlayer.Group) then
        table.insert(Ignored.Players, newPlayer)
    end
end
end

GetClosestToMouse = function()
local Target, Closest = nil, 1 / 0

for _, v in pairs(Players:GetPlayers()) do
if (v.Character and v ~= Client and v.Character:FindFirstChild("HumanoidRootPart")) then
    local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
    local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude

    if
        (Circle.Radius > Distance and Distance < Closest and OnScreen and
            WallCheck(v.Character.HumanoidRootPart.Position, {Client, v.Character}))
     then
        Closest = Distance
        Target = v
    end
end
end
return Target
end

function TargetChecks(Target)
if getgenv().Settings.Checks.UnlockedOnDeath == true and Target.Character then
return Target.Character.BodyEffects["K.O"].Value and true or false
end
return false
end

function PredictionictTargets(Target, Value)
return Target.Character[getgenv().Settings.Silent.AimPart].CFrame +
(Target.Character.Humanoid.MoveDirection * Value * 16)
end


local WTS = function(Object)
local ObjectVector = Camera:WorldToScreenPoint(Object.Position)
return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

local IsOnScreen = function(Object)
local IsOnScreen = Camera:WorldToScreenPoint(Object.Position)
return IsOnScreen
end

local FilterObjs = function(Object)
if string.find(Object.Name, "Gun") then
return
end
if table.find({"Part", "MeshPart", "BasePart"}, Object.ClassName) then
return true
end
end

Mouse.KeyDown:Connect(
function(Key)
if (Key == getgenv().Settings.Silent.SilentToggle:lower()) then
    if getgenv().Settings.Silent.Enabled == true then
        getgenv().Settings.Silent.Enabled = false
    else
        getgenv().Settings.Silent.Enabled = true
    end
end
end
)
RS.Heartbeat:Connect(function()
if getgenv().Settings.Silent.Enabled then
  if Prey and Prey.Character and Prey.Character:WaitForChild(getgenv().Settings.Silent.AimPart) then
        if getgenv().Settings.Resolve.Desync == true and Prey.Character:WaitForChild("HumanoidRootPart").Velocity.magnitude > getgenv().Settings.Resolve.Desync then            
            pcall(function()
                local TargetVel = Prey.Character[getgenv().Settings.Silent.AimPart]
                TargetVel.Velocity = Vector3.new(0.36, 0.21, 0.34)
                TargetVel.AssemblyLinearVelocity = Vector3.new(0.36, 0.21, 0.34)
            end)
        end
        if getgenv().Settings.Silent.AntiGroundShots == true and Prey.Character:FindFirstChild("Humanoid") == Enum.HumanoidStateType.Freefall then
            pcall(function()
                local TargetVelv5 = Prey.Character[getgenv().Settings.Silent.AimPart]
                TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, (TargetVelv5.Velocity.Y * 0.2), TargetVelv5.Velocity.Z)
                TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, (TargetVelv5.Velocity.Y * 0.2), TargetVelv5.Velocity.Z)
            end)
        end
        if getgenv().Settings.Resolve.UnderGround == true then            
            pcall(function()
                local TargetVelv2 = Prey.Character[getgenv().Settings.Silent.AimPart]
                TargetVelv2.Velocity = Vector3.new(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
                TargetVelv2.AssemblyLinearVelocity = Vector3.new(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
            end)
        end
        if getgenv().Settings.Resolve.SkyAA == true and AimlockTarget and AimlockTarget.Character and
        AimlockTarget.Character:WaitForChild("HumanoidRootPart").Velocity.magnitude >
            getgenv().Settings.Resolve.SkyAA
 then
    pcall(
        function()
            local TargetVel = AimlockTarget.Character[getgenv().Settings.Part.AimPart]
            TargetVel.Velocity = Vec3(0.36, 0.21, 0.34)
            TargetVel.AssemblyLinearVelocity = Vec3(0.36, 0.21, 0.34)
        end
    )
end
        if getgenv().Settings.Silent.UseAirPart == true and Prey.Character:FindFirstChild("Humanoid") then
            if Prey.Character.Humanoid.FloorMaterial == Enum.Material.Air and Prey.Character.Humanoid.Jump == true then
                getgenv().Settings.Silent.Part = getgenv().Settings.Silent.AirPart
            else
                getgenv().Settings.Silent.Part = OldSilentAimPart
            end
        end
  end
end
if getgenv().Settings.CamLock.Enabled == true then
    if getgenv().Settings.CamLock.DesyncRES == true and Plr and Plr.Character and Plr.Character:WaitForChild(getgenv().Settings.CamLock.AimPart) and Plr.Character:WaitForChild("HumanoidRootPart").Velocity.magnitude > getgenv().Settings.CamLock.DesyncRES then
        pcall(function()
            local TargetVelv3 = Plr.Character[getgenv().Settings.CamLock.AimPart]
            TargetVelv3.Velocity = Vector3.new(0, 0, 0)
            TargetVelv3.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        end)
    end
    if getgenv().Settings.CamLock.UnderGroundRES == true and Plr and Plr.Character and Plr.Character:WaitForChild(getgenv().Settings.CamLock.AimPart)then
        pcall(function()
            local TargetVelv4 = Plr.Character[getgenv().Settings.CamLock.AimPart]
            TargetVelv4.Velocity = Vector3.new(TargetVelv4.Velocity.X, 0, TargetVelv4.Velocity.Z)
            TargetVelv4.AssemblyLinearVelocity = Vector3.new(TargetVelv4.Velocity.X, 0, TargetVelv4.Velocity.Z)
        end)
    end
end
end)

RS.RenderStepped:Connect(
function()
if prey then
    if prey ~= nil and getgenv().Settings.Silent.Enabled and getgenv().Settings.Silent.ClosestPart == true then
        getgenv().Settings.Silent["AimPart"] = tostring(GetClosestBodyPart(prey.Character))
    end
end
end
)


game:GetService("CorePackages").Packages:Destroy()



local grmt = getrawmetatable(game)
local index = grmt.__index
local properties = {
"Hit" -- Ill Add more Mouse properties soon,
}
setreadonly(grmt, false)

grmt.__index =
newcclosure(
function(self, v)
if Mouse and (table.find(properties, v)) then
    prey = GetClosestToMouse()
    if prey ~= nil and getgenv().Settings.Silent.Enabled and not TargetChecks(prey) then
        local endpoint = PredictionictTargets(prey, getgenv().Settings.Silent.Prediction)

        return (table.find(properties, tostring(v)) and endpoint)
    end
end
return index(self, v)
end
)



local Script = {Functions = {}}
Script.Functions.getToolName = function(name)
    local split = string.split(string.split(name, "[")[2], "]")[1]
    return split
end
Script.Functions.getEquippedWeaponName = function()
    if (Client.Character) and Client.Character:FindFirstChildWhichIsA("Tool") then
       local Tool =  Client.Character:FindFirstChildWhichIsA("Tool")
       if string.find(Tool.Name, "%[") and string.find(Tool.Name, "%]") and not string.find(Tool.Name, "Wallet") and not string.find(Tool.Name, "Phone") then
          return Script.Functions.getToolName(Tool.Name)
       end
    end
    return nil
end
RS.RenderStepped:Connect(function()
if Script.Functions.getEquippedWeaponName() ~= nil then
    local WeaponSettings = getgenv().Settings.AutoGunFov[Script.Functions.getEquippedWeaponName()]
    if WeaponSettings ~= nil and getgenv().Settings.AutoGunFov.Enabled == true then
        getgenv().Settings.FOV.Radius = WeaponSettings.FOV
    else
        getgenv().Settings.FOV.Radius = getgenv().Settings.FOV.Radius
    end
end
end)

-- // Locals

local Players, Uis, RService, Inset, CurrentCamera = 
game:GetService("Players"), 
game:GetService("UserInputService"), 
game:GetService("RunService"),
game:GetService("GuiService"):GetGuiInset().Y,
game:GetService("Workspace").CurrentCamera

local Client = Players.LocalPlayer;

local Mouse, Camera = Client:GetMouse(), workspace.CurrentCamera

local Circle = Drawing.new("Circle")

local CF, RNew, Vec3, Vec2 = CFrame.new, Ray.new, Vector3.new, Vector2.new

local OldAimPart = getgenv().Settings.Part.AimPart

local AimlockTarget, MousePressed, CanNotify = nil, false, false

getgenv().UpdateFOV = function()
if (not Circle) then
    return (Circle)
end
Circle.Color = Settings.Visual.FovColor
Circle.Visible = Settings.Visual.Fov
Circle.Radius = Settings.Visual.FovRadius
Circle.Thickness = Settings.Visual.FovThickness
Circle.Position = Vec2(Mouse.X, Mouse.Y + Inset)
return (Circle)
end

RService.Heartbeat:Connect(UpdateFOV)

-- // Functions

getgenv().WallCheck = function(destination, ignore)
local Origin = Camera.CFrame.p
local CheckRay = RNew(Origin, destination - Origin)
local Hit = game.workspace:FindPartOnRayWithIgnoreList(CheckRay, ignore)
return Hit == nil
end

getgenv().WTS = function(Object)
local ObjectVector = Camera:WorldToScreenPoint(Object.Position)
return Vec2(ObjectVector.X, ObjectVector.Y)
end

getgenv().IsOnScreen = function(Object)
local IsOnScreen = Camera:WorldToScreenPoint(Object.Position)
return IsOnScreen
end

getgenv().FilterObjs = function(Object)
if string.find(Object.Name, "Gun") then
    return
end
if table.find({"Part", "MeshPart", "BasePart"}, Object.ClassName) then
    return true
end
end

getgenv().GetClosestBodyPart = function(character)
local ClosestDistance = 1 / 0
local BodyPart = nil
if (character and character:GetChildren()) then
    for _, x in next, character:GetChildren() do
        if FilterObjs(x) and IsOnScreen(x) then
            local Distance = (WTS(x) - Vec2(Mouse.X, Mouse.Y)).Magnitude
            if (Circle.Radius > Distance and Distance < ClosestDistance) then
                ClosestDistance = Distance
                BodyPart = x
            end
        end
    end
end
return BodyPart
end

getgenv().WorldToViewportPoint = function(P)
return Camera:WorldToViewportPoint(P)
end

getgenv().WorldToScreenPoint = function(P)
return Camera.WorldToScreenPoint(Camera, P)
end

getgenv().GetObscuringObjects = function(T)
if T and T:FindFirstChild(getgenv().Settings.Part.AimPart) and Client and Client.Character:FindFirstChild("Head") then
    local RayPos =
        workspace:FindPartOnRay(RNew(T[getgenv().Settings.Part.AimPart].Position, Client.Character.Head.Position))
    if RayPos then
        return RayPos:IsDescendantOf(T)
    end
end
end

getgenv().GetNearestTarget = function()
local AimlockTarget, Closest = nil, 1 / 0

for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    if (v.Character and v ~= Client and v.Character:FindFirstChild("HumanoidRootPart")) then
        local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
        local Distance = (Vec2(Position.X, Position.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude
        if Settings.AimAssist.CheckForWalls then
            if
                (Circle.Radius > Distance and Distance < Closest and OnScreen and
                    getgenv().WallCheck(v.Character.HumanoidRootPart.Position, {Client, v.Character}))
             then
                Closest = Distance
                AimlockTarget = v
            end
        elseif Settings.AimAssist.UseCircleRadius then
            if
                (Circle.Radius > Distance and Distance < Closest and OnScreen and
                    getgenv().WallCheck(v.Character.HumanoidRootPart.Position, {Client, v.Character}))
             then
                Closest = Distance
                AimlockTarget = v
            end
        else
            if (Circle.Radius > Distance and Distance < Closest and OnScreen) then
                Closest = Distance
                AimlockTarget = v
            end
        end
    end
end
return AimlockTarget
end

-- // Use KeyBoardKey Function

Uis.InputBegan:connect(
function(input)
    if
        input.KeyCode == Settings.AimAssist.KeyBoardKey and Settings.AimAssist.UseKeyBoardKey == true and
            getgenv().Settings.AimAssist.Enable == true and
            AimlockTarget == nil and
            getgenv().Settings.AimAssist.HoldKey == true
     then
        pcall(
            function()
                MousePressed = true
                AimlockTarget = GetNearestTarget()
            end
        )
    end
end
)

Uis.InputBegan:Connect(
function(keyinput, stupid)
    if
        keyinput.KeyCode == Settings.AimAssist.KeyBoardKey and Settings.AimAssist.UseKeyBoardKey == true and
            getgenv().Settings.AimAssist.Enable == true and
            AimlockTarget == nil and
            getgenv().Settings.AimAssist.ToggleKey == true
     then
        pcall(
            function()
                MousePressed = true
                AimlockTarget = GetNearestTarget()
            end
        )
    elseif
        keyinput.KeyCode == Settings.AimAssist.KeyBoardKey and Settings.AimAssist.UseKeyBoardKey == true and
            getgenv().Settings.AimAssist.Enable == true and
            AimlockTarget ~= nil
     then
        AimlockTarget = nil
        MousePressed = false
    end
end
)

-- // AimAssist Functions. RunService HeartBeat.

task.spawn(
function()
    while task.wait() do
        if MousePressed == true and getgenv().Settings.AimAssist.Enable == true then
            if AimlockTarget and AimlockTarget.Character then
                if getgenv().Settings.Part.GetClosestPart == true then
                    getgenv().Settings.Part.AimPart = tostring(GetClosestBodyPart(AimlockTarget.Character))
                end
            end
            if getgenv().Settings.AimAssist.DisableOutSideCircle == true and AimlockTarget and AimlockTarget.Character then
                if
                    Circle.Radius <
                        (Vec2(
                            Camera:WorldToScreenPoint(AimlockTarget.Character.HumanoidRootPart.Position).X,
                            Camera:WorldToScreenPoint(AimlockTarget.Character.HumanoidRootPart.Position).Y
                        ) - Vec2(Mouse.X, Mouse.Y)).Magnitude
                 then
                    AimlockTarget = nil
                end
            end
        end
    end
end
)

RService.Heartbeat:Connect(
function()
    if getgenv().Settings.AimAssist.Enable == true and MousePressed == true then
        if getgenv().Settings.AimAssist.UseShake == true and AimlockTarget and AimlockTarget.Character then
            pcall(
                function()
                    local TargetVelv1 = AimlockTarget.Character[getgenv().Settings.Part.AimPart]
                    TargetVelv1.Velocity =
                        Vec3(TargetVelv1.Velocity.X, TargetVelv1.Velocity.Y, TargetVelv1.Velocity.Z) +
                        Vec3(
                            math.random(-getgenv().Settings.AimAssist.ShakePower, getgenv().Settings.AimAssist.ShakePower),
                            math.random(-getgenv().Settings.AimAssist.ShakePower, getgenv().Settings.AimAssist.ShakePower),
                            math.random(-getgenv().Settings.AimAssist.ShakePower, getgenv().Settings.AimAssist.ShakePower)
                        ) *
                            0.1
                    TargetVelv1.AssemblyLinearVelocity =
                        Vec3(TargetVelv1.Velocity.X, TargetVelv1.Velocity.Y, TargetVelv1.Velocity.Z) +
                        Vec3(
                            math.random(-getgenv().Settings.AimAssist.ShakePower, getgenv().Settings.AimAssist.ShakePower),
                            math.random(-getgenv().Settings.AimAssist.ShakePower, getgenv().Settings.AimAssist.ShakePower),
                            math.random(-getgenv().Settings.AimAssist.ShakePower, getgenv().Settings.AimAssist.ShakePower)
                        ) *
                            0.1
                end
            )
        end
        if getgenv().Settings.Resolver.UnderGround == true and AimlockTarget and AimlockTarget.Character then
            pcall(
                function()
                    local TargetVelv2 = AimlockTarget.Character[getgenv().Settings.Part.AimPart]
                    TargetVelv2.Velocity = Vec3(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
                    TargetVelv2.AssemblyLinearVelocity = Vec3(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
                end
            )
        end
        if
            getgenv().Settings.Resolver.Desync == true and AimlockTarget and AimlockTarget.Character and
                AimlockTarget.Character:WaitForChild("HumanoidRootPart").Velocity.magnitude >
                    getgenv().Settings.Resolver.Detection
         then
            pcall(
                function()
                    local TargetVel = AimlockTarget.Character[getgenv().Settings.Part.AimPart]
                    TargetVel.Velocity = Vec3(0, 0, 0)
                    TargetVel.AssemblyLinearVelocity = Vec3(0, 0, 0)
                end
            )
        end
        if getgenv().Settings.AimAssist.ThirdPerson == true and getgenv().Settings.AimAssist.FirstPerson == true then
            if
                (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 or
                    (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1
             then
                CanNotify = true
            else
                CanNotify = false
            end
        elseif getgenv().Settings.AimAssist.ThirdPerson == true and getgenv().Settings.AimAssist.FirstPerson == false then
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 then
                CanNotify = true
            else
                CanNotify = false
            end
        elseif getgenv().Settings.AimAssist.ThirdPerson == false and getgenv().Settings.AimAssist.FirstPerson == true then
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then
                CanNotify = true
            else
                CanNotify = false
            end
        end
        
        if getgenv().Settings.AimAssist.AutoPingSets == true and getgenv().Settings.Prediction.PredictionVelocity then
            local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
            local split = string.split(pingvalue, "(")
            local ping = tonumber(split[1])
            if ping > 190 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.206547
            elseif ping > 180 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.19284
            elseif ping > 170 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.1923111
            elseif ping > 160 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.1823111
            elseif ping > 150 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.171
            elseif ping > 140 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.165773
            elseif ping > 130 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.1223333
            elseif ping > 120 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.143765
            elseif ping > 110 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.1455
            elseif ping > 100 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.130340
            elseif ping > 90 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.136
            elseif ping > 80 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.1347
            elseif ping > 70 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.119
            elseif ping > 60 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.12731
            elseif ping > 50 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.127668
            elseif ping > 40 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.125
            elseif ping > 30 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.11
            elseif ping > 20 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.12588
            elseif ping > 10 then
                getgenv().Settings.Prediction.PredictionVelocity = 0.9
            end
        end
        if getgenv().Settings.Check.CheckIfKo == true and AimlockTarget and AimlockTarget.Character then
            local KOd = AimlockTarget.Character:WaitForChild("BodyEffects")["K.O"].Value
            local Grabbed = AimlockTarget.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
            if AimlockTarget.Character.Humanoid.health < 1 or KOd or Grabbed then
                if MousePressed == true then
                    AimlockTarget = nil
                    MousePressed = false
                end
            end
        end
        if
            getgenv().Settings.Check.DisableOnTargetDeath == true and AimlockTarget and
                AimlockTarget.Character:FindFirstChild("Humanoid")
         then
            if AimlockTarget.Character.Humanoid.health < 1 then
                if MousePressed == true then
                    AimlockTarget = nil
                    MousePressed = false
                end
            end
        end
        if
            getgenv().Settings.Check.DisableOnPlayerDeath == true and Client.Character and
                Client.Character:FindFirstChild("Humanoid") and
                Client.Character.Humanoid.health < 1
         then
            if MousePressed == true then
                AimlockTarget = nil
                MousePressed = false
            end
        end
        if getgenv().Settings.Part.CheckIfJumped == true and getgenv().Settings.Part.GetClosestPart == false then
            if AimlockTarget and AimlockTarget.Character then
                if AimlockTarget.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                    getgenv().Settings.Part.AimPart = getgenv().Settings.Part.CheckIfJumpedAimPart
                else
                    getgenv().Settings.Part.AimPart = OldAimPart
                end
            end
        end
        if
            AimlockTarget and AimlockTarget.Character and
                AimlockTarget.Character:FindFirstChild(getgenv().Settings.Part.AimPart)
         then
            if getgenv().Settings.AimAssist.FirstPerson == true then
                if CanNotify == true then
                    if getgenv().Settings.Prediction.PredictMovement == true then
                        if getgenv().Settings.Smooth.Smoothness == true then
                            local AimAssist =
                                CF(
                                Camera.CFrame.p,
                                AimlockTarget.Character[getgenv().Settings.Part.AimPart].Position +
                                    AimlockTarget.Character.Humanoid.MoveDirection * getgenv().Settings.Prediction.PredictionVelocity * 16
                            )

                            Camera.CFrame =
                                Camera.CFrame:Lerp(
                                AimAssist,
                                getgenv().Settings.Smooth.SmoothnessAmount,
                                Enum.EasingStyle.Circular,
                                Enum.EasingDirection.Out
                            )
                        else
                            Camera.CFrame =
                                CF(
                                Camera.CFrame.p,
                                AimlockTarget.Character[getgenv().Settings.Part.AimPart].CFrame +
                                    AimlockTarget.Character.Humanoid.MoveDirection * getgenv().Settings.Prediction.PredictionVelocity * 0 + Vector3
                            )
                        end
                    elseif getgenv().Settings.Prediction.PredictMovement == false then
                        if getgenv().Settings.Smooth.Smoothness == true then
                            local AimAssist =
                                CF(
                                Camera.CFrame.p,
                                AimlockTarget.Character[getgenv().Settings.Part.AimPart].Position
                            )
                            Camera.CFrame =
                                Camera.CFrame:Lerp(
                                AimAssist,
                                getgenv().Settings.Smooth.SmoothnessAmount
                                
                            )
                        else
                            Camera.CFrame =
                                CF(
                                Camera.CFrame.p,
                                AimlockTarget.Character[getgenv().Settings.Part.AimPart].Position
                            )
                        end
                    end
                end
            end
        end
    end
end
)local PerformanceStats = game:GetService("CoreGui"):WaitForChild("RobloxGui"):WaitForChild("PerformanceStats")

local MemLabel
local color,
color1,
color2,
color3,
color4,
color5,
color6,
color7,
color8,
color9,
color10,
color11,
color12,
color13,
color14,
color15,
color16,
color17,
color18,
color19
for I, Child in next, PerformanceStats:GetChildren() do
if Child.StatsMiniTextPanelClass.TitleLabel.Text == "Mem" then
    MemLabel = Child.StatsMiniTextPanelClass.ValueLabel
    color = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_0
    color1 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_1
    color2 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_2
    color3 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_3
    color4 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_4
    color5 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_5
    color6 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_6
    color7 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_7
    color8 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_8
    color9 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_9
    color10 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_10
    color11 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_11
    color12 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_12
    color13 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_13
    color14 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_14
    color15 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_15
    color16 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_16
    color17 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_17
    color18 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_18
    color19 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_19
    break
end
end
MemLabel:GetPropertyChangedSignal("Text"):Connect(
function()
    if Settings.Spoofer.MemorySpoofer == true then
        MemLabel.Text = math.random(Settings.Spoofer.MemoryLeast, Settings.Spoofer.MemoryMost) / 100 .. " MB"
        color.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color1.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color2.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color3.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color4.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color5.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color6.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color7.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color8.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color9.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color10.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color11.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color12.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color13.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color14.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color15.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color16.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color17.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color18.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
        color19.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
    end
end)
end
)()

                
                
                    
